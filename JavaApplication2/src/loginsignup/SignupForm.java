package loginsignup;

import java.awt.Color;
import utilities.Connection;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;

/**
 *
 * @author Dell
 */
public class SignupForm extends javax.swing.JFrame {

    /**
     * Creates new form SignupForm
     */
    public SignupForm() {
        initComponents();
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainColorPanelDecor = new javax.swing.JPanel();
        registrationMainText = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        usernameLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\icons8-username-48.png"));
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\Downloads\\i-password.jpg"));
        passwordTextField = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\icons8-name-48.png"));
        firstNameTextField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        lastNameLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\icons8-name-48.png"));
        lastNameTextField = new javax.swing.JTextField();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        emailLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\icons8-email-48.png"));
        jButton1 = new javax.swing.JButton();
        jButton1.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\logout12.png"));
        userTypeDropdown = new javax.swing.JComboBox<>();
        userTypeLabel = new javax.swing.JLabel();
        userTypeLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\Another.png"));
        jButton2 = new javax.swing.JButton();
        jButton2.setIcon(new ImageIcon("C:\\Users\\ASUS\\Downloads\\icons8-sign-up-.png"));
        selectCourseLabel = new javax.swing.JLabel();
        selectCourseLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\Downloads\\icons-courses-64.png"));
        selectCourseDropdown = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(872, 580));

        mainColorPanelDecor.setBackground(new java.awt.Color(175, 167, 187));
        
        lblNewLabel = new JLabel("New label");
        lblNewLabel.setIcon(new ImageIcon("C:\\Users\\ASUS\\OneDrive\\Documents\\CMS-main\\heraldnew.png"));

        javax.swing.GroupLayout mainColorPanelDecorLayout = new javax.swing.GroupLayout(mainColorPanelDecor);
        mainColorPanelDecorLayout.setHorizontalGroup(
        	mainColorPanelDecorLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(mainColorPanelDecorLayout.createSequentialGroup()
        			.addGap(124)
        			.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(138, Short.MAX_VALUE))
        );
        mainColorPanelDecorLayout.setVerticalGroup(
        	mainColorPanelDecorLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(mainColorPanelDecorLayout.createSequentialGroup()
        			.addGap(210)
        			.addComponent(lblNewLabel)
        			.addContainerGap(253, Short.MAX_VALUE))
        );
        mainColorPanelDecor.setLayout(mainColorPanelDecorLayout);

        registrationMainText.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        registrationMainText.setText("Registration Panel");

        usernameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        usernameLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        passwordLabel.setText("Password:");

        firstNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        firstNameLabel.setText("Firstname");

        lastNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lastNameLabel.setText("Lastname");

        confirmPasswordLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password: ");

        emailLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailLabel.setText("Email:");

        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        userTypeDropdown.setModel(new DefaultComboBoxModel(new String[] {"-- SELECT --", "Student", "Instructor"}));
        userTypeDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeDropdownActionPerformed(evt);
            }
        });

        userTypeLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        userTypeLabel.setText("User Type: ");

        jButton2.setText("Register");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        selectCourseLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        selectCourseLabel.setText("Select Course:");

        selectCourseDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- SELECT --", "BBA", "Computing" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(mainColorPanelDecor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(51)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(registrationMainText, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(emailLabel, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
        							.addComponent(firstNameLabel, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
        							.addComponent(lastNameLabel)
        							.addComponent(usernameLabel, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
        							.addGroup(layout.createSequentialGroup()
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(passwordLabel, GroupLayout.PREFERRED_SIZE, 103, GroupLayout.PREFERRED_SIZE)
        									.addComponent(confirmPasswordLabel)
        									.addComponent(userTypeLabel))
        								.addGap(18)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(confirmPasswordTextField, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
        									.addComponent(passwordTextField, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
        									.addComponent(userTypeDropdown, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE))))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(selectCourseLabel, GroupLayout.PREFERRED_SIZE, 123, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(usernameTextField, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
        								.addComponent(emailTextField, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
        								.addComponent(lastNameTextField, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
        								.addComponent(firstNameTextField, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
        								.addComponent(selectCourseDropdown, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)))))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(36)
        					.addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 103, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
        					.addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
        					.addGap(84))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(mainColorPanelDecor, GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(55)
        			.addComponent(registrationMainText)
        			.addGap(45)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(firstNameLabel)
        				.addComponent(firstNameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lastNameLabel)
        				.addComponent(lastNameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(emailLabel)
        				.addComponent(emailTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(usernameLabel)
        				.addComponent(usernameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(passwordTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(passwordLabel))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(confirmPasswordTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(confirmPasswordLabel))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(userTypeDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(userTypeLabel, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(selectCourseDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(selectCourseLabel))
        			.addGap(40)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(43, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        LoginForm loginForm = new LoginForm();
        loginForm.setLocationRelativeTo(null);
        loginForm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String firstName = firstNameTextField.getText();
            String lastName = lastNameTextField.getText();
            String password = passwordTextField.getText();
            String confirmPassword = confirmPasswordTextField.getText();
            String username = usernameTextField.getText();
            String userType = userTypeDropdown.getSelectedItem().toString();
            String email = emailTextField.getText();
            String course = selectCourseDropdown.getSelectedItem().toString();  // Declare 'course' variable

            boolean checkValidations = checkForValidation(firstName, lastName, username, password, confirmPassword, email, userType);

            if (!checkValidations) {
                return;
            }

            try (java.sql.Connection conn = Connection.getConnection()) {
                String query;

                switch (userType) {
                    case "Instructor":
                        query = "INSERT INTO instructor (firstname, lastname, username, password, confirm_password, email,user_type) VALUES (?, ?, ?, ?, ?, ?,?)";
                        break;
//                    case "Course Administrator":
//                        query = "INSERT INTO course_admin (firstname, lastname, username, password, confirm_password,email,user_type) VALUES (?, ?, ?, ?, ?, ?,?)";
//                        break;
                    case "Student":
                        query = "INSERT INTO student (firstname, lastname, username, password, confirm_password,email,user_type,course) VALUES (?, ?, ?, ?, ?, ?,?,?)";
                        break;
                    default:
                        throw new IllegalArgumentException("Invalid user type: " + userType);
                }

                try (PreparedStatement preparedStmt = conn.prepareStatement(query)) {
                    preparedStmt.setString(1, firstName);
                    preparedStmt.setString(2, lastName);
                    preparedStmt.setString(3, username);
                    preparedStmt.setString(4, password);
                    preparedStmt.setString(5, confirmPassword);
                    preparedStmt.setString(6, email);
                    preparedStmt.setString(7, userType);
                    if (userType.equals("Student")) {
                        preparedStmt.setString(8, course);
                    }

                    int rowsAffected = preparedStmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Successfully Registered !");
                        dispose();
                        LoginForm loginForm = new LoginForm();
                        loginForm.setLocationRelativeTo(null);
                        loginForm.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(this, "Registration Failed. Please try again.");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error occurred during registration. Please try again.");
            System.out.println("SQLException: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid user type. Please select a valid user type.");
            System.out.println("IllegalArgumentException: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred. Please try again.");
            System.out.println("EXCEPTION: " + e.getMessage());
        }
    }


//GEN-LAST:event_jButton2ActionPerformed

    private void userTypeDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeDropdownActionPerformed
        if (userTypeDropdown.getSelectedItem().toString().toLowerCase().equals("student") || userTypeDropdown.getSelectedItem().toString().toLowerCase().equals("-- select --")){
            this.selectCourseDropdown.setVisible(true);
            this.selectCourseLabel.setVisible(true);
        }else{
             this.selectCourseDropdown.setVisible(false);
            this.selectCourseLabel.setVisible(false);
        }
    }//GEN-LAST:event_userTypeDropdownActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignupForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JTextField confirmPasswordTextField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JPanel mainColorPanelDecor;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JLabel registrationMainText;
    private javax.swing.JComboBox<String> selectCourseDropdown;
    private javax.swing.JLabel selectCourseLabel;
    private javax.swing.JComboBox<String> userTypeDropdown;
    private javax.swing.JLabel userTypeLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    private JLabel lblNewLabel;
    // End of variables declaration//GEN-END:variables

    private boolean checkForValidation(String firstname, String lastname, String username, String password, String confirmPassword, String email, String userType) {
        if (firstname.isBlank()) {
            JOptionPane.showMessageDialog(this, "Firstname field is blank");
            return false;
        }

        if (lastname.isBlank()) {
            JOptionPane.showMessageDialog(this, "Lastname field is blank");
            return false;
        }

        if (username.isBlank()) {
            JOptionPane.showMessageDialog(this, "Username field is blank");
            return false;
        }

        if (password.isBlank()) {
            JOptionPane.showMessageDialog(this, "Password field is blank");
            return false;
        }

        if (confirmPassword.isBlank()) {
            JOptionPane.showMessageDialog(this, "Confirm Password field is blank");
            return false;
        }

        if (email.isBlank()) {
            JOptionPane.showMessageDialog(this, "Email field is blank");
            return false;
        }

        if (!confirmPassword.equals(password)) {
            JOptionPane.showMessageDialog(this, "Password Mismatch");
            return false;
        }

        if (!email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{3,}$")) {
            JOptionPane.showMessageDialog(this, "Invalid Email");
            return false;
        }
        if (userType.equals("-- SELECT --")) {
            JOptionPane.showMessageDialog(this, "Please select user type");
            return false;
        }

        return true;
    }


}
