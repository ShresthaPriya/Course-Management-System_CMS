/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package studentdashboard;

import java.awt.Container;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import loginsignup.LoginForm;
import utilities.Connection;
import java.util.Vector;
import java.awt.Color;

/**
 *
 * @author Dell
 */
public class EnrollInModuleForm extends javax.swing.JFrame {

    private String levelValue;
    private int studentId;
    private String username;
    private String userType;
    private String course;
    private boolean booleanFlag1;
    private boolean booleanFlag2;

    /**
     * Creates new form EnrollInModuleForm
     */
    public EnrollInModuleForm() {
    	getContentPane().setBackground(new Color(175, 167, 187));
        initComponents();
    }

    public EnrollInModuleForm(String levelValue, int studentId, String username, String userType, String course) {
        this.levelValue = levelValue;
        this.studentId = studentId;
        this.username = username;
        this.userType = userType;
        this.course = course;

        initComponents();
        showHideOptionalModules();
        getValuesInTable();

    }

    private void showHideOptionalModules() {
        if (this.levelValue.equals("4") || this.levelValue.equals("5")) {
            selectOptionalModuleLabel.setVisible(false);
            jScrollPane2.setVisible(false);
        } else {
            selectOptionalModuleLabel.setVisible(true);
            jScrollPane2.setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        selectOptionalModuleLabel = new javax.swing.JLabel();
        enrollButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Module ID", "Module Name", "Level", "Instructor"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        selectOptionalModuleLabel.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        selectOptionalModuleLabel.setText("Select Optional Modules [Click one row at a time to enroll in optional at a time]");

        enrollButton.setText("Enroll Here");
        enrollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollButtonActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Module ID", "Module Name", "Level", "Instructor"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel2.setText("Enroll to modules");

        jButton1.setText("Back To Student Dashboard");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectOptionalModuleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(640, 640, 640)
                        .addComponent(enrollButton)
                        .addGap(26, 26, 26)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(255, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(enrollButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(selectOptionalModuleLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel2)
                    .addContainerGap(649, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void enrollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollButtonActionPerformed
        try {
            java.sql.Connection conn = Connection.getConnection();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            Vector<Vector> data = model.getDataVector();

            for (Vector<Object> row : data) {
                int courseId = Integer.parseInt(row.get(0).toString());
                int moduleId = Integer.parseInt(row.get(2).toString());

                // Insert into ENROLLED_COURSE table
                String insertEnrolledCourseSQL = "INSERT INTO ENROLLED_COURSE (course_id, student_id, module_id) VALUES (?, ?, ?)";
                try (PreparedStatement enrolledCourseStmt = conn.prepareStatement(insertEnrolledCourseSQL)) {
                    enrolledCourseStmt.setInt(1, courseId);
                    enrolledCourseStmt.setInt(2, studentId);
                    enrolledCourseStmt.setInt(3, moduleId);
                    enrolledCourseStmt.executeUpdate();
                }

                // Insert into MARKS table
                String insertMarksSQL = "INSERT INTO MARKS (student_id, module_id, marks, grade) VALUES (?, ?, ?, ?)";
                try (PreparedStatement marksStmt = conn.prepareStatement(insertMarksSQL)) {
                    marksStmt.setInt(1, studentId);
                    marksStmt.setInt(2, moduleId);
                    marksStmt.setInt(3, 0);
                    marksStmt.setString(4, "N/A"); // Set a default value for the grade, change it accordingly
                    marksStmt.executeUpdate();
                }
            }

            conn.close();

            dispose();
            JOptionPane.showMessageDialog(this, "Enrollment Successful !");
            StudentDashboard stdDash = new StudentDashboard(username, userType);
            stdDash.setLocationRelativeTo(null);
            stdDash.setVisible(true);

        } catch (SQLException ex) {
            Logger.getLogger(StudentDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_enrollButtonActionPerformed

    

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        StudentDashboard stdDash = new StudentDashboard(username, userType);
        stdDash.setLocationRelativeTo(null);
        stdDash.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed


    
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
    	try {
            int val = JOptionPane.showConfirmDialog(this, "Are you sure you want to enroll in this module ?");
            if (val == 0) {
                System.out.println(val);

                int row = jTable2.getSelectedRow();
                String courseId = jTable2.getValueAt(row, 0).toString();
                String moduleId = jTable2.getValueAt(row, 2).toString();

                java.sql.Connection conn = Connection.getConnection();

                String sql = "INSERT INTO ENROLLED_COURSE (course_id, student_id, module_id) VALUES (?, ?, ?)";
                PreparedStatement preparedStmt1 = conn.prepareStatement(sql);
                preparedStmt1.setInt(1, Integer.parseInt(courseId));
                preparedStmt1.setInt(2, studentId);
                preparedStmt1.setInt(3, Integer.parseInt(moduleId));
                int rowsAffectedEnrCourse = preparedStmt1.executeUpdate();

                String insertMarksSQL = "INSERT INTO MARKS (student_id, module_id, marks, grade) VALUES (?, ?, ?, ?)";
                PreparedStatement preparedStmt2 = conn.prepareStatement(insertMarksSQL);
                preparedStmt2.setInt(1, studentId);
                preparedStmt2.setInt(2, Integer.parseInt(moduleId));
                preparedStmt2.setInt(3, 0);
                preparedStmt2.setString(4, "N/A");
                int rowsAffectedMarks = preparedStmt2.executeUpdate();

                if (rowsAffectedEnrCourse > 0 && rowsAffectedMarks > 0) {
                    JOptionPane.showMessageDialog(this, "Successfully Enrolled!");
                    dispose();
                    StudentDashboard dashboard = new StudentDashboard(username, userType);
                    dashboard.setLocationRelativeTo(null);
                    dashboard.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to enroll. Please try again.");
                }

                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnrollInModuleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnrollInModuleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnrollInModuleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnrollInModuleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnrollInModuleForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enrollButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel selectOptionalModuleLabel;
    // End of variables declaration//GEN-END:variables

    private void getValuesInTable() {

        try {

            java.sql.Connection conn = Connection.getConnection();

            String sql = "SELECT\n"
                    + "    course.name AS courseName,\n"
                    + "    course.id AS courseId,\n"
                    + "    modules.id AS moduleId,\n"
                    + "    modules.name AS moduleName,\n"
                    + "    modules.level AS LEVEL,\n"
                    + "    instructor.firstname AS instructorFirstname,\n"
                    + "    instructor.lastname AS instructorLastname\n"
                    + "FROM\n"
                    + "    modules\n"
                    + "INNER JOIN COURSE ON course.id = modules.course_id\n"
                    + "INNER JOIN instructor ON modules.instructor_id = instructor.id\n"
                    + "WHERE\n"
                    + "    modules.is_optional = FALSE AND modules.level = " + levelValue + " AND course.name = '" + this.course + "'";

            PreparedStatement preparedStmt = conn.prepareStatement(sql);

            ResultSet rs = preparedStmt.executeQuery();

            System.out.println(rs);
            while (rs.next()) {
                String courseId = String.valueOf(rs.getString("courseId"));
                String moduleId = String.valueOf(rs.getString("moduleId"));
                String courseName = rs.getString("courseName");
                String moduleName = rs.getString("moduleName");
                String moduleLevel = String.valueOf(rs.getString("level"));
                String instructor = String.valueOf(rs.getString("instructorFirstname")) + " " + String.valueOf(rs.getString("instructorLastname"));

                String tbData[] = {courseId, courseName, moduleId, moduleName, moduleLevel, instructor};
                DefaultTableModel tbl = (DefaultTableModel) jTable1.getModel();
                tbl.addRow(tbData);
            }

            if (levelValue.equals("6")) {

                String sqlOptional = "SELECT\n"
                        + "    course.name AS courseName,\n"
                        + "    course.id AS courseId,\n"
                        + "    modules.id AS moduleId,\n"
                        + "    modules.name AS moduleName,\n"
                        + "    modules.level AS LEVEL,\n"
                        + "    instructor.firstname AS instructorFirstname,\n"
                        + "    instructor.lastname AS instructorLastname\n"
                        + "FROM\n"
                        + "    modules\n"
                        + "INNER JOIN COURSE ON course.id = modules.course_id\n"
                        + "INNER JOIN instructor ON modules.instructor_id = instructor.id\n"
                        + "WHERE\n"
                        + "    modules.is_optional = TRUE AND modules.level = " + levelValue + " AND course.name = '" + this.course + "'";

                PreparedStatement preparedStmtOptional = conn.prepareStatement(sqlOptional);

                ResultSet rsOptional = preparedStmtOptional.executeQuery();

                System.out.println(rsOptional);
                while (rsOptional.next()) {
                    String courseId = String.valueOf(rsOptional.getString("courseId"));
                    String moduleId = String.valueOf(rsOptional.getString("moduleId"));
                    String courseName = rsOptional.getString("courseName");
                    String moduleName = rsOptional.getString("moduleName");
                    String moduleLevel = String.valueOf(rsOptional.getString("level"));
                    String instructor = String.valueOf(rsOptional.getString("instructorFirstname")) + " " + String.valueOf(rsOptional.getString("instructorLastname"));

                    String tbDataOptional[] = {courseId, courseName, moduleId, moduleName, moduleLevel, instructor};
                    DefaultTableModel tbl2 = (DefaultTableModel) jTable2.getModel();
                    tbl2.addRow(tbDataOptional);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(StudentDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
